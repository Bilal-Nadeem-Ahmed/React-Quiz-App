{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","questions","questionText","answerOptions","answerText","isCorrect","useState","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","className","length","map","answerOption","onClick","nextQuestion","handleButtonClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAIe,SAASA,IACtB,IAAMC,EAAY,CAChB,CACEC,aAAc,mBACdC,cAAe,CACb,CAAEC,WAAY,WAAYC,WAAW,GACrC,CAAED,WAAY,WAAYC,WAAW,GACrC,CAAED,WAAY,QAASC,WAAW,GAClC,CAAED,WAAY,OAAQC,WAAW,KAGrC,CACEH,aAAc,mBACdC,cAAe,CACb,CAAEC,WAAY,UAAWC,WAAW,GACpC,CAAED,WAAY,QAASC,WAAW,GAClC,CAAED,WAAY,WAAYC,WAAW,GACrC,CAAED,WAAY,aAAcC,WAAW,KAG3C,CACEH,aAAc,iBACdC,cAAe,CACb,CAAEC,WAAY,GAAIC,WAAW,GAC7B,CAAED,WAAY,GAAIC,WAAW,GAC7B,CAAED,WAAY,GAAIC,WAAW,GAC7B,CAAED,WAAY,GAAIC,WAAW,KAGjC,CACEH,aAAc,yCACdC,cAAe,CACb,CAAEC,WAAY,IAAKC,WAAW,GAC9B,CAAED,WAAY,IAAKC,WAAW,GAC9B,CAAED,WAAY,IAAKC,WAAW,GAC9B,CAAED,WAAY,IAAKC,WAAW,MAnCR,EAwCkBC,mBAAS,GAxC3B,mBAwCrBC,EAxCqB,KAwCJC,EAxCI,OA0CMF,oBAAS,GA1Cf,mBA0CrBG,EA1CqB,KA0CVC,EA1CU,OA4CFJ,mBAAS,GA5CP,mBA4CrBK,EA5CqB,KA4CdC,EA5Cc,KA2D5B,OACE,qBAAKC,UAAU,MAAf,SACGJ,EACC,sBAAKI,UAAU,gBAAf,UACE,iDACA,uBACA,4CACcF,EADd,WAC6BV,EAAUa,aAIzC,qCACE,sBAAKD,UAAU,mBAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,6BAAKZ,EAAUM,GAAiBL,iBAGlC,qBAAKW,UAAU,iBAAf,SACE,2CACYN,EAAkB,EAD9B,KACmCN,EAAUa,eAIjD,qBAAKD,UAAU,iBAAf,SACGZ,EAAUM,GAAiBJ,cAAcY,KAAI,SAACC,GAAD,OAC5C,wBAAQC,QAAS,kBAtCH,SAACZ,IAEP,IAAdA,GACFO,EAASD,EAAQ,GAGnB,IAAMO,EAAeX,EAAkB,EACnCW,EAAejB,EAAUa,OAC3BN,EAAmBU,GAEnBR,GAAa,GA4BkBS,CAAkBH,EAAaX,YAAtD,SACGW,EAAaZ,uBCzF9B,IAYegB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.75357fd4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  const questions = [\r\n    {\r\n      questionText: \"What is my name?\",\r\n      answerOptions: [\r\n        { answerText: \"Abdallah\", isCorrect: false },\r\n        { answerText: \"Mohammed\", isCorrect: false },\r\n        { answerText: \"Bilal\", isCorrect: true },\r\n        { answerText: \"John\", isCorrect: false },\r\n      ],\r\n    },\r\n    {\r\n      questionText: \"Where do i live?\",\r\n      answerOptions: [\r\n        { answerText: \"Belarus\", isCorrect: false },\r\n        { answerText: \"Tokyo\", isCorrect: true },\r\n        { answerText: \"New York\", isCorrect: false },\r\n        { answerText: \"Nottingham\", isCorrect: false },\r\n      ],\r\n    },\r\n    {\r\n      questionText: \"How old am I ?\",\r\n      answerOptions: [\r\n        { answerText: 29, isCorrect: true },\r\n        { answerText: 14, isCorrect: false },\r\n        { answerText: 21, isCorrect: false },\r\n        { answerText: 28, isCorrect: false },\r\n      ],\r\n    },\r\n    {\r\n      questionText: \"How many Harry Potter books are there?\",\r\n      answerOptions: [\r\n        { answerText: \"1\", isCorrect: false },\r\n        { answerText: \"4\", isCorrect: false },\r\n        { answerText: \"6\", isCorrect: false },\r\n        { answerText: \"7\", isCorrect: true },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  // used to display the score pannel at the end\r\n  const [showScore, setShowScore] = useState(false);\r\n\r\n  const [score, setScore] = useState(0);\r\n  //  change the question and if someone reaches end of quiz, show the score pannel\r\n  const handleButtonClick = (isCorrect) => {\r\n    // adds up the correct answers\r\n    if (isCorrect === true) {\r\n      setScore(score + 1);\r\n    }\r\n\r\n    const nextQuestion = currentQuestion + 1;\r\n    if (nextQuestion < questions.length) {\r\n      setCurrentQuestion(nextQuestion);\r\n    } else {\r\n      setShowScore(true);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"app\">\r\n      {showScore ? (\r\n        <div className=\"score-section\">\r\n          <p>Congratulations!</p>\r\n          <br></br>\r\n          <p>\r\n            You scored {score} out of {questions.length}\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"question-section\">\r\n            <div className=\"question-text\">\r\n              <h1>{questions[currentQuestion].questionText}</h1>\r\n            </div>\r\n\r\n            <div className=\"question-count\">\r\n              <h2>\r\n                Question {currentQuestion + 1} /{questions.length}\r\n              </h2>\r\n            </div>\r\n          </div>\r\n          <div className=\"answer-section\">\r\n            {questions[currentQuestion].answerOptions.map((answerOption) => (\r\n              <button onClick={() => handleButtonClick(answerOption.isCorrect)}>\r\n                {answerOption.answerText}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}